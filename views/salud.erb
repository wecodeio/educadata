<style>

@import url(/css/salud.css);

#chart {
  margin-left: -40px;
  height: 506px;
}

text {
  font: 10px sans-serif;
}

.dot {
  stroke: #000;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.label {
  fill: #777;
}

.year.label {
  font: 500 96px "Helvetica Neue";
  fill: #ddd;
}

.year.label.active {
  fill: #aaa;
}

.overlay {
  fill: none;
  pointer-events: all;
  cursor: ew-resize;
}
h1 { font-size: 3em; }

div.description {
  line-height: 1.5em;
  width: 750px;
  font-size: 1.5em;
}
</style>

<h1>Salud educativa de las Provincias</h1>

<p id="chart"></p>

<aside>Posicione el mouse sobre el año para desplazar el tiempo</aside>

<p class="attribution">Basado en: <a href="https://github.com/RandomEtc/mind-gapper-js">Tom Carden</a>, <a href="http://gapminder.org">Gapminder</a>, <a href="http://bost.ocks.org/mike/nations/">Mike Bostock</a>. Utilizando datos del <a href="http://datospublicos.gob.ar/">portal de datos públicos</a></p>

<div class="description">
  <p>Este gráfico está basado en cruzar 2 indicadores positivos por provincia
  (en este caso "Promedio de promoción anual en la educación primaria" y "Promedio de promoción anual en la educación secundaria"</p>

  <p>En forma interactiva el gráfico se mueve al avanzar los años mostrando la
  situación de cada provincia. El <strong>radio</strong> de las burbujas indica el presupuesto de la provincia, que da cuenta de la inversión que tuvo esa provincia. El dato actualmente está evaluado medianto los montos por provincia. En un futuro podría utilizarse el presupuesto asignado por alumno y así atenuar las fluctuaciones generadas por la inflación.</p>

  <p>Las provincias que estén en el <strong>cuadrante superior derecho</strong> muestran una mejor situación educativa y las que queden en el cuadrante inferior izquierdo serían las que necesitarían atención (podría usarse también como indicadores positivos cantidad de cargos docentes por alumno u otros).</p>
</div>

<script src="/js/d3.v3.min.js"></script>
<script>

// Various accessors that specify the four dimensions of data to visualize.
// Primaria y Secundaria son 6 años => hay que ponderarlos
function x(d) { return d.primaria / 6; }
function y(d) { return d.secundaria / 6; }
function radius(d) { return d.inversion*3; }
function color(d) { return d.provincia; }
function key(d) { return d.provincia; }

// Chart dimensions.
var margin = {top: 19.5, right: 19.5, bottom: 19.5, left: 39.5},
    width = 960 - margin.right,
    height = 500 - margin.top - margin.bottom;

// Various scales. These domains make assumptions of data, naturally.
var xScale = d3.scale.linear().domain([80, 100]).range([0, width]),
    yScale = d3.scale.linear().domain([60, 100]).range([height, 0]),
    radiusScale = d3.scale.sqrt().domain([1e8, 1e10]).range([0, 40]),
    colorScale = d3.scale.category10();

// The x & y axes.
var xAxis = d3.svg.axis().orient("bottom").scale(xScale),
    yAxis = d3.svg.axis().scale(yScale).orient("left");

// Create the SVG container and set the origin.
var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Add the x-axis.
svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

// Add the y-axis.
svg.append("g")
    .attr("class", "y axis")
    .call(yAxis);

// Add an x-axis label.
svg.append("text")
    .attr("class", "x label")
    .attr("text-anchor", "end")
    .attr("x", width)
    .attr("y", height - 6)
    .text("Promoción Nivel Primario (%)");

// Add a y-axis label.
svg.append("text")
    .attr("class", "y label")
    .attr("text-anchor", "end")
    .attr("y", 6)
    .attr("dy", ".75em")
    .attr("transform", "rotate(-90)")
    .text("Promoción Nivel Secundario (%)");

// Add the year label; the value is set on transition.
var label = svg.append("text")
    .attr("class", "year label")
    .attr("text-anchor", "end")
    .attr("y", height - 24)
    .attr("x", width)
    .text(2003);

// Load the data.
d3.json("/json/salud.json", function(nations) {


  // A bisector since many nation's data is sparsely-defined.
  var bisect = d3.bisector(function(d) { return d[0]; });

  // Add a dot per nation. Initialize the data at 2003, and set the colors.
  var dot = svg.append("g")
      .attr("class", "dots")
    .selectAll(".dot")
      .data(interpolateData(2003))
    .enter().append("circle")
      .attr("class", "dot")
      .style("fill", function(d) { return colorScale(color(d)); })
      .call(position)
      .sort(order);

  // Add a title.
  dot.append("title")
      .text(function(d) { return d.provincia; });

  // Add an overlay for the year label.
  var box = label.node().getBBox();

  var overlay = svg.append("rect")
        .attr("class", "overlay")
        .attr("x", box.x)
        .attr("y", box.y)
        .attr("width", box.width)
        .attr("height", box.height)
        .on("mouseover", enableInteraction);

  // Start a transition that interpolates the data based on year.
  svg.transition()
      .duration(10000)
      .ease("linear")
      .tween("year", tweenYear)
      .each("end", enableInteraction);

  // Positions the dots based on data.
  function position(dot) {
    dot .attr("cx", function(d) { return xScale(x(d)); })
        .attr("cy", function(d) { return yScale(y(d)); })
        .attr("r", function(d) { return radiusScale(radius(d)); });
  }

  // Defines a sort order so that the smallest dots are drawn on top.
  function order(a, b) {
    return radius(b) - radius(a);
  }

  // After the transition finishes, you can mouseover to change the year.
  function enableInteraction() {
    var yearScale = d3.scale.linear()
        .domain([2003, 2009])
        .range([box.x + 10, box.x + box.width - 10])
        .clamp(true);

    // Cancel the current transition, if any.
    svg.transition().duration(0);

    overlay
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .on("mousemove", mousemove)
        .on("touchmove", mousemove);

    function mouseover() {
      label.classed("active", true);
    }

    function mouseout() {
      label.classed("active", false);
    }

    function mousemove() {
      displayYear(yearScale.invert(d3.mouse(this)[0]));
    }
  }

  // Tweens the entire chart by first tweening the year, and then the data.
  // For the interpolated data, the dots and label are redrawn.
  function tweenYear() {
    var year = d3.interpolateNumber(2003, 2009);
    return function(t) { displayYear(year(t)); };
  }

  // Updates the display to show the specified year.
  function displayYear(year) {
    dot.data(interpolateData(year), key).call(position).sort(order);
    label.text(Math.round(year));
  }

  // Interpolates the dataset for the given (fractional) year.
  function interpolateData(year) {
    return nations.map(function(d) {
      return {
        provincia: d.provincia,
        primaria: interpolateValues(d.primaria, year),
        inversion: interpolateValues(d.inversion, year),
        secundaria: interpolateValues(d.secundaria, year)
      };
    });
  }

  // Finds (and possibly interpolates) the value for the specified year.
  function interpolateValues(values, year) {
    var i = bisect.left(values, year, 0, values.length - 1),
        a = values[i];
    if (i > 0) {
      var b = values[i - 1],
          t = (year - a[0]) / (b[0] - a[0]);
      return a[1] * (1 - t) + b[1] * t;
    }
    return a[1];
  }
});

</script>
